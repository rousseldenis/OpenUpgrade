# Copyright 2020 Payam Yasaie <https://www.tashilgostar.com>
# Copyright 2020 Andrii Skrypka <andrijskrypa@ukr.net>
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl.html).
from openupgradelib import openupgrade

_unlink_by_xmlid = [
    'mrp.sequence_mrp_unbuild',
]


def convert_many2one_field(env):
    openupgrade.m2o_to_x2m(
        env.cr,
        env['stock.move.line'], 'stock_move_line',
        'lot_produced_ids', openupgrade.get_legacy_name('lot_produced_id')
    )


def fill_unbuild_company_id(cr):
    openupgrade.logged_query(
        cr, """
        UPDATE mrp_unbuild mu
        SET company_id = COALESCE(
            (SELECT sm.company_id FROM stock_move sm
             WHERE mu.id = sm.unbuild_id AND sm.company_id IS NOT NULL
             LIMIT 1), ru.company_id)
        FROM res_users ru
        WHERE ru.id = mu.create_uid AND mu.company_id IS NULL
        """
    )


def fill_stock_picking_type_sequence_code(env):
    openupgrade.logged_query(
        env.cr, """
        UPDATE stock_picking_type spt
        SET sequence_code = CASE
          WHEN spt.id = wh.pbm_type_id THEN 'PC'
          WHEN spt.id = wh.sam_type_id THEN 'SFP'
          WHEN spt.id = wh.manu_type_id THEN 'MO'
          END
        FROM stock_warehouse wh
        WHERE sequence_code = 'TO_FILL' AND spt.id in (wh.pbm_type_id, wh.sam_type_id, wh.manu_type_id)
        """
    )


def handle_unbuild_sequence(env):
    # although later the 'mrp.sequence_mrp_unbuild' sequence will be deleted,
    # we need to nullify its code (if having one) here
    # because we want a new autogenerated sequence
    openupgrade.logged_query(
        env.cr, """
        UPDATE ir_sequence seq
        SET code = NULL
        FROM ir_model_data imd
        WHERE imd.res_id = seq.id AND imd.module = 'mrp'
            AND imd.name = 'sequence_mrp_unbuild'"""
    )
    # force execute this function (it is noupdate=1 in xml data)
    env['res.company'].create_missing_unbuild_sequences()


def fill_manufacture_mto_pull(env):
    warehouses = env['stock.warehouse'].search([
        ('manufacture_to_resupply', '=', True),
        ('manufacture_mto_pull_id', '=', False),
    ])
    for wh in warehouses:
        rule_details = wh._get_global_route_rules_values()['manufacture_mto_pull_id']
        values = rule_details.get('update_values', {})
        values.update(rule_details['create_values'])
        values.update({'warehouse_id': wh.id})
        wh['manufacture_mto_pull_id'] = env['stock.rule'].create(values).id


def fill_mrp_workorder_product_uom_id(cr):
    openupgrade.logged_query(
        cr, """
        UPDATE mrp_workorder mw
        SET product_uom_id = mp.product_uom_id
        FROM mrp_production mp
        WHERE mw.production_id = mp.id AND mw.product_uom_id IS NULL
        """
    )


def update_consumption(env):
    """ Create column and pre-fill 'flexible' because In Odoo 12 work like 'flexible'"""
    openupgrade.logged_query(
        env.cr, """
        UPDATE mrp_bom
        SET consumption = 'flexible'
        WHERE type = 'normal'
        """,
    )
    openupgrade.logged_query(
        env.cr, """
        UPDATE mrp_workorder
        SET consumption = 'flexible'
        """,
    )


def enable_group_mrp_byproducts(env):
    if env['mrp.bom.byproduct'].search([], limit=1):
        config = env['res.config.settings'].create({'group_mrp_byproducts': True})
        config.execute()


def generate_wo_line(env):
    """ Convert active_move_line_ids to raw_workorder_line_ids """
    openupgrade.logged_query(env.cr, """
    SELECT id, workorder_id
    FROM stock_move_line
    WHERE workorder_id IS NOT NULL AND done_wo = False and state NOT IN ('done', 'cancel')
    """)
    active_sml_ids = []
    wo_ids = set()
    for sml_id, wo_id in env.cr.fetchall():
        wo_ids.add(wo_id)
        active_sml_ids.append(sml_id)
    env['mrp.workorder'].browse(list(wo_ids))._refresh_wo_lines()
    env['stock.move.line'].browse(active_sml_ids).unlink()


def fill_planned_datetime(env):
    openupgrade.logged_query(env.cr, """
    UPDATE mrp_workorder wo
    SET date_planned_start = mo.date_planned_start, date_planned_finished = mo.date_planned_finished
    FROM mrp_production mo
    WHERE wo.state NOT IN ('done', 'cancel') AND wo.production_id = mo.id
        AND wo.date_planned_finished IS NULL AND wo.date_planned_start IS NULL
    """)


@openupgrade.migrate()
def migrate(env, version):
    convert_many2one_field(env)
    fill_unbuild_company_id(env.cr)
    fill_stock_picking_type_sequence_code(env)
    handle_unbuild_sequence(env)
    fill_manufacture_mto_pull(env)
    fill_mrp_workorder_product_uom_id(env.cr)
    update_consumption(env)
    openupgrade.delete_records_safely_by_xml_id(env, _unlink_by_xmlid)
    openupgrade.load_data(env.cr, 'mrp', 'migrations/13.0.2.0/noupdate_changes.xml')
    enable_group_mrp_byproducts(env)
    generate_wo_line(env)
    fill_planned_datetime(env)
